package algo;

import java.util.*;
class Graph {
	int N, M;
	int status[];
	ArrayList<ArrayList<Integer>> graph;
}

public class Main {

	public static void main(String[] args) {

		Graph g = new Graph();
		Scanner sc = new Scanner(System.in);
		int s;
		// queue 선언
		g.N = sc.nextInt();
		g.M = sc.nextInt();
		s = sc.nextInt();
		g.status = new int[g.N + 1];
		g.graph = new <ArrayList<Integer>>ArrayList();
		for (int i = 0; i <= g.N; i++) {
			g.status[i] = 0;
			g.graph.add(new ArrayList<>());
		}

		for (int i = 0; i < g.M; i++) {
			int ver1, ver2;
			ver1 = sc.nextInt();
			ver2 = sc.nextInt();
			g.graph.get(ver1).add(ver2);
			g.graph.get(ver2).add(ver1);
		}
		g.status[s] = 1;
		System.out.println(s);
		g = DFS(g, s);
	}

	public static Graph DFS(Graph g, int s) {
		while (!g.graph.get(s).isEmpty()) {
			int ver2 = g.graph.get(s).get(0);
			if (g.status[ver2] == 0) {
				g.status[ver2] = 1;
				g.graph.get(s).remove(0);
				for (int i = 0; i < g.graph.get(ver2).size(); i++) {
					if (g.graph.get(ver2).get(i) == ver2)
						g.graph.get(ver2).remove(i);
				}
				System.out.println(ver2);
				g = DFS(g, ver2);
			} else
				g.graph.get(s).remove(0);

		}
		return g;
	}

}
/*
 * 8 12 7 1 2 2 4 4 7 3 6 6 1 7 6 7 8 1 3 2 7 1 4 2 5 7 5
 */