package algo;

import java.util.*;

public class tomato {
	static Queue<Integer> que1 = new Queue<Integer>();
	
	static int status[][];
	static int cnt = 0;
	static int tomatonum = 0;

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int box[][];
		int N, M;

		M = sc.nextInt();
		N = sc.nextInt();
		box = new int[N][M];
		status = new int[N][M];
		tomatonum = N*M; 
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				box[i][j] = sc.nextInt();
				if (box[i][j] == -1)
				{
					status[N][M] = 1;
					tomatonum--; 
				}
				else if (box[i][j] == 1) {
					queue[0].add(i * M + j ); 
					status[i][j] = 1;
				} else
					status[i][j] = 0;
			}
		}  // 초기화
		
		int ac=0, deac=1;
		int cnt2=1; 
		for(int day =0;;day++)
		{ 

			// 토마토가 모두 익었으면 날짜를 출력하고 break;
			// 토마토가 더이상 익을 수 없으면 -1 출력하고 break;
			if( cnt == tomatonum)
			{
				System.out.println(day + "\n");
			}
			else if(cnt2 == 0)
			{
				System.out.println("-1");
			}
			
			while(!queue[ac].isEmpty())
			{
				cnt2 = 0; 
				int place = queue[ac].remove(); 
				int i = place/M; 
				int j = place%N;
				int temp = input_queue(deac, i, j, M, N);
				if(temp == 1)
					cnt2 =1; 
			}

			if(ac == 0)
			{
				ac = 1;
				deac = 0;
			}
			else
			{
				ac=0;
				deac = 1; 
			}
		}

	}

	static public int input_queue(int deac, int i, int j, int M, int N) {
		int cnt1=0; 
		
		if (i > 0) {
			if (status[i - 1][j] == 0) {
				status[i - 1][j] = 1;
				queue[deac].add((i - 1) * M + j);
				cnt1 =1; 
				cnt++;
			}
		}
		if (i < N - 1) {
			if (status[i + 1][j] == 0) {
				status[i + 1][j] = 1;
				queue[deac].add((i + 1) * M + j);
				cnt1 =1;
				cnt++; 
			}
		}
		if (j > 0) {
			if (status[i][j - 1] == 0) {
				status[i][j - 1] = 1;
				queue[deac].add(i * M + j - 1);
				cnt1=1; 
			}
		}
		if (j < M - 1) {
			if (status[i][j + 1] == 0) {
				status[i][j + 1] = 1;
				queue[deac].add(i * M + j + 1);
				cnt1=1; 
			}
		}
		return cnt1; 

	}

}
